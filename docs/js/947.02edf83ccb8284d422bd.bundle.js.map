{"version":3,"file":"js/947.02edf83ccb8284d422bd.bundle.js","mappings":"yIAMKA,EAAA,E,6IAAA,EAAAA,IAAAA,EAAA,KACH,IAAM,YACN,OAAO,aAaT,MAAMC,EACJC,GAEAC,OAAOC,QAAQF,EAASG,OACrBC,KAAI,EAAEC,EAAIF,MAA8B,CACvCG,KAAOH,EAAuBG,KAC9BC,SAAWJ,EAAuBI,SAClCC,KAAOL,EAAuBK,KAC9BH,GAAAA,MAEDI,MAAK,CAACC,EAAGC,IAAOD,EAAEF,KAAOG,EAAEH,KAAO,GAAK,IAoB/BI,EAAe,KAC1B,MAAQC,KAAMC,EAAS,QAAEC,IAAY,IAAAC,UACnClB,EAAGmB,KACHC,UACE,MAAMC,QAlB6C,SAAI,QAAI,EAAAC,GAAItB,EAAGuB,OAoBlE,OAAOtB,EAAmBoB,MAS9B,OAJA,IAAAG,YAAU,KAvBc,IAACC,EAAAA,EAwBZ,IAAMR,KAvBnB,SAAQ,QAAI,EAAAK,GAAItB,EAAGuB,OAAQrB,GACpBA,EAASG,MAIPoB,EAAGxB,EAAmBC,IAHpB,OAsBR,CAACe,IAEG,CACLD,UAAW,MAAAA,EAAAA,EAAa,GACxBU,aAPoBjB,GA5BG,CAACA,IACnB,SAAI,QAAI,EAAAa,GAAI,GAAGtB,EAAGuB,QAAO,YAAad,GA2BAkB,CAAYlB,K,gSC7C3D,MA4FA,EA5FuB,KACrB,MAAM,KAAED,IAAS,EAAAoB,EAAA,MACVC,EAAQC,IAAa,IAAAC,aACtB,UAAEf,GAAcF,IAChBkB,GAAoB,IAAAC,UACxB,IAAOJ,EAASb,EAAUa,QAAQK,GAAMA,EAAE1B,OAASqB,IAAUb,GAC7D,CAACa,EAAQb,KAGL,aAAEmB,EAAY,SAAEC,IAAa,WAC7B,aAAEV,GAAiBZ,IACnBuB,GAAW,IAAAC,cACflB,OAASX,SAAAA,YACDiB,EAAa,CACjBjB,SAAAA,EACAD,KAAM,MAAAA,OAAA,EAAAA,EAAM+B,MACZ7B,KAAM8B,KAAKC,UAGf,CAACf,EAAclB,IAGjB,OACE,gBAAC,KAAD,CACEkC,WAAW,aACXC,eAAe,UACfC,QAAS,EACTC,MAAM,QAEN,gBAAC,IAAD,KAAS,aACT,gBAAC,IAAD,KAAM,uBACN,gBAAC,KAAD,CACEH,WAAW,aACXI,WAAW,QACXC,aAAa,MACbC,UAAU,MACVC,QAAQ,cACRJ,MAAM,QAEN,gBAAC,OAAD,CAAMR,SAAUF,EAAaE,GAAWa,MAAO,CAAEL,MAAO,SACtD,gBAAC,K,qHAAD,IACMT,EAAS,a,MADf,CAEEU,WAAW,UACXK,aAAc,EACdC,YAAY,WACZC,OAAO,OACPC,EAAE,YAEJ,gBAAC,IAAD,CAAQC,KAAK,UAAS,eAI1B,gBAAC,IAAD,KACI1B,EAEE,+BADA,iCAGN,gBAAC,KAAD,KACE,gBAAC,IAAD,CAAQ2B,QAAS,IAAM1B,OAAU,IAAY,2BAG7C,gBAAC,IAAD,CAAQ0B,QAAS,IAAM1B,EAAU,MAAAtB,OAAA,EAAAA,EAAM+B,OAAQkB,QAAQ,SAAQ,sBAKnC,IAA7BzB,EAAkB0B,QAAgB7B,GACjC,gBAAC,IAAD,CAAM8B,MAAM,UAAUC,WAAW,aAAY,+BAK9C5B,EAAkB1B,KAAI,EAAGE,KAAA,EAAMD,GAAAA,EAAIE,SAAAA,KAClC,gBAAC,IAAD,CACEoD,GAAG,QACHd,aAAa,MACbC,UAAU,KACV7B,IAAKZ,EACL0C,QAAQ,cACRJ,MAAM,QAEN,gBAAC,KAAD,CAAQiB,KAAM,eAAQ,IACtB,gBAAC,KAAD,CAAKC,GAAG,KACN,gBAAC,IAAD,CAAMH,WAAW,QAAQ,GACzB,gBAAC,IAAD,CAAMI,SAAS,MAAMvD,Q","sources":["webpack:///./src/data/useQuestions.ts","webpack:///./src/pages/Questions.tsx"],"sourcesContent":["import { useQuery } from 'react-query'\nimport { get, onValue, ref, set, DataSnapshot } from 'firebase/database'\nimport { v4 as uuidv4 } from 'uuid'\nimport { useEffect } from 'react'\nimport { db } from './firebase'\n\nenum QA {\n  key = 'questions',\n  path = 'questions/',\n}\n\ntype Question = {\n  readonly user?: string | null\n  readonly date: number\n  readonly question: string\n}\n\ntype QuestionWithId = Question & {\n  readonly id: string\n}\n\nconst mapDataToQuestions = (\n  snapshot: DataSnapshot,\n): readonly QuestionWithId[] =>\n  Object.entries(snapshot.val())\n    .map(([id, val]: readonly unknown[]) => ({\n      user: (val as QuestionWithId).user,\n      question: (val as QuestionWithId).question,\n      date: (val as QuestionWithId).date,\n      id: id as string,\n    }))\n    .sort((a, b) => (a.date > b.date ? 1 : -1))\n\nexport const setQuestion = (question: Question) => {\n  return set(ref(db, `${QA.path}${uuidv4()}`), question)\n}\n\nexport const getQuestions = (): Promise<DataSnapshot> => get(ref(db, QA.path))\n\nexport const onQuestion = (cb: (snap: readonly QuestionWithId[]) => void) => {\n  onValue(ref(db, QA.path), (snapshot) => {\n    if (!snapshot.val()) {\n      return []\n    }\n\n    return cb(mapDataToQuestions(snapshot))\n  })\n}\n\nexport type { Question, QuestionWithId }\n\nexport const useQuestions = () => {\n  const { data: questions, refetch } = useQuery<readonly QuestionWithId[]>(\n    QA.key,\n    async () => {\n      const docs = await getQuestions()\n\n      return mapDataToQuestions(docs)\n    },\n  )\n\n  const makeQuestion = (question: Question) => setQuestion(question)\n  useEffect(() => {\n    onQuestion(() => refetch())\n  }, [refetch])\n\n  return {\n    questions: questions ?? [],\n    makeQuestion,\n  }\n}\n","import React, { useCallback, useMemo, useState, VFC } from 'react'\nimport {\n  Text,\n  Textarea,\n  Heading,\n  Button,\n  VStack,\n  HStack,\n  Flex,\n  Avatar,\n  Box,\n} from '@chakra-ui/react'\nimport { useForm } from 'react-hook-form'\nimport { Question, useQuestions } from '../data/useQuestions'\nimport { useUser } from '../data/useUser'\n\nconst Questions: VFC = () => {\n  const { user } = useUser()\n  const [filter, setFilter] = useState<string | null | undefined>()\n  const { questions } = useQuestions()\n  const filteredQuestions = useMemo(\n    () => (filter ? questions.filter((q) => q.user === filter) : questions),\n    [filter, questions],\n  )\n\n  const { handleSubmit, register } = useForm<Question>()\n  const { makeQuestion } = useQuestions()\n  const onSubmit = useCallback(\n    async ({ question }: Question) => {\n      await makeQuestion({\n        question,\n        user: user?.email,\n        date: Date.now(),\n      })\n    },\n    [makeQuestion, user],\n  )\n\n  return (\n    <VStack\n      alignItems=\"flex-start\"\n      justifyContent=\"stretch\"\n      spacing={8}\n      width=\"full\"\n    >\n      <Heading>Preguntas</Heading>\n      <Text>Hacer una pregunta:</Text>\n      <VStack\n        alignItems=\"flex-start\"\n        background=\"white\"\n        borderRadius=\"2xl\"\n        boxShadow=\"2xl\"\n        padding=\"2rem 1.5rem\"\n        width=\"full\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)} style={{ width: '100%' }}>\n          <Textarea\n            {...register('question')}\n            background=\"teal.50\"\n            marginBottom={6}\n            placeholder=\"Pregunta\"\n            resize=\"none\"\n            w=\"full\"\n          />\n          <Button type=\"submit\">Preguntar</Button>\n        </form>\n      </VStack>\n\n      <Text>\n        {!filter\n          ? 'Mostrando todas las preguntas'\n          : 'Mostrando solo mis preguntas'}\n      </Text>\n      <HStack>\n        <Button onClick={() => setFilter(undefined)}>\n          Ver todas las preguntas\n        </Button>\n        <Button onClick={() => setFilter(user?.email)} variant=\"ghost\">\n          Ver mis preguntas\n        </Button>\n      </HStack>\n\n      {filteredQuestions.length === 0 && filter && (\n        <Text color=\"red.400\" fontWeight=\"extrabold\">\n          Todavia no preguntaste nada\n        </Text>\n      )}\n\n      {filteredQuestions.map(({ user, id, question }) => (\n        <Flex\n          bg=\"white\"\n          borderRadius=\"2xl\"\n          boxShadow=\"lg\"\n          key={id}\n          padding=\"1rem 1.2rem\"\n          width=\"full\"\n        >\n          <Avatar name={user ?? undefined} />\n          <Box ml=\"3\">\n            <Text fontWeight=\"bold\">{user}</Text>\n            <Text fontSize=\"sm\">{question}</Text>\n          </Box>\n        </Flex>\n      ))}\n    </VStack>\n  )\n}\n\nexport default Questions\n"],"names":["QA","mapDataToQuestions","snapshot","Object","entries","val","map","id","user","question","date","sort","a","b","useQuestions","data","questions","refetch","useQuery","key","async","docs","db","path","useEffect","cb","makeQuestion","setQuestion","useUser","filter","setFilter","useState","filteredQuestions","useMemo","q","handleSubmit","register","onSubmit","useCallback","email","Date","now","alignItems","justifyContent","spacing","width","background","borderRadius","boxShadow","padding","style","marginBottom","placeholder","resize","w","type","onClick","variant","length","color","fontWeight","bg","name","ml","fontSize"],"sourceRoot":""}